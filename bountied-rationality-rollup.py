import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import facebook
import openai
import os
import re

# Dev panel - https://developers.facebook.com/tools/explorer/?method=GET&path=576594440982218%2Ffeed&version=v15.0
# Exchange short-lived access token for long-lived access tokens: https://developers.facebook.com/docs/facebook-login/guides/access-tokens/get-long-lived/
fb_access_token = ""
group_id = ""
app_id = ""
openai.organization = ""
openai.api_key = os.getenv("OPENAI_API_KEY")
graph = facebook.GraphAPI(access_token=fb_access_token, version='3.1')
email_list = "email1@gmail.com, email2@gmail.com"

# get the posts from the previous day
def get_posts():
    yesterday = datetime.datetime.now() - datetime.timedelta(days=1)
    start_of_yesterday = int(yesterday.replace(hour=0, minute=0, second=0, microsecond=0).timestamp())
    end_of_yesterday = int(yesterday.replace(hour=23, minute=59, second=59, microsecond=999999).timestamp())
    posts = graph.get_connections(id=group_id, connection_name='feed', since=start_of_yesterday, until=end_of_yesterday)
    return posts

def send_email(recipients, posts):
    yesterday = datetime.datetime.now() - datetime.timedelta(days=1)
    yesterday = yesterday.strftime('%B %d, %Y')
    port = 465
    smtp_server = "smtp.gmail.com"
    sender_email = ""
    password = ""
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['Subject'] = '(DEMO) Bountied Rationality Posts from ' + yesterday
    email_text = """<b>Rollup created & managed by <a rel="noopener noreferrer" target="_blank" href="https://impactmarkets.io/">GoodX</a></b>
    <i><ul><li>Please do not forward this email or any of the bounties to others. The success of this FB group is built on trust.</li>
    <li>Posts that contain "closed", "claimed", or "fulfilled" in the first 30 characters or "email:false" anywhere in the post are not included.</li>
    <li>Bounty titles are generated by GPT-3 so they may be inaccurate.</li>
    <li>Share your suggestions or questions with us on <a rel="noopener noreferrer" target="_blank" href="https://discord.gg/7zMNNDSxWv">Discord</a>.</li></ul></i>"""
    for post in posts['data']:
        if 'message' in post:
            bounty = post['message']
            print("POST: " + bounty[:100])
            if 'closed' not in bounty[:30].lower() and 'fulfilled' not in bounty[:30].lower() and 'claimed' not in bounty[:30].lower() and 'email:false' not in bounty.lower() and 'email: false' not in bounty.lower():
                email_text += '<div class="divider" style="border-bottom: 1px solid #9f9f9f; margin: 30px 0px 30px 0px"></div>'
                try:
                    title = openai.Completion.create(
                        engine="text-davinci-003",
                        prompt=f'Bounty request:\n{bounty[:1000]}\n\nA very short title of the request:\n',
                        temperature=0.6,
                        max_tokens=150,
                    )
                    ai_title = title['choices'][0]['text']
                    if len(ai_title) > 0:
                        email_text += f'<div style="margin: 0px 0px 7px 0px;"><b>' + ai_title + '</b></div>'
                except:
                    print('OpenAI API error')
                new_lines = re.findall(r'\n', bounty)
                for line in new_lines:
                    bounty = bounty.replace(line, '<br>')
                if len(bounty) > 700:
                    num_words_removed = len(bounty.split(' ')) - len(bounty[:700].split(' '))
                    email_text += bounty[:700] + f'... <i>{num_words_removed} more words</i>' + '<br>'
                else:
                    email_text += bounty + '<br>'
                # get the comments of this post
                comments = graph.get_connections(id=post['id'], connection_name='comments')
                for comment in comments['data']:
                    if 'message' in comment:
                        if 'email:false' not in comment['message'].lower() and 'email: false' not in comment['message'].lower():
                            email_text +=  '<div style="margin: 10px 0px 0px 40px;"><b>First Comment:</b><br>' + comment['message'][:500] + '</div>'
                            if len(comment['message']) > 500:
                                email_text +=  '... <i>more on FB</i>'
                            break
                post_id = post['id'].split('_')[1]
                post_link = 'https://www.facebook.com/groups/576594440982218/posts/' + post_id + '/'
                comment_text = 'comment' if len(comments['data']) == 1 else 'comments'
                email_text +=  f"""<div style="margin: 10px 0px 0px 0px;"><a rel="noopener noreferrer" target="_blank" href="{post_link}">{len(comments["data"])} {comment_text}</a></div>"""

    if len(posts['data']) == 0:
        print('No posts found for yesterday')
    else:
        # bold money mentions
        money_mentions = re.findall(r'\$\d+', email_text)
        for mention in money_mentions:
            email_text = email_text.replace(mention, '<b>' + mention + '</b>')
        # change markdown links to html links
        while True:
            cleaned_links = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a rel="noopener noreferrer" target="_blank" href="\2">\1</a>', email_text)
            if cleaned_links == email_text:
                break
            email_text = cleaned_links
        # send email
        body = MIMEText(email_text, 'html') 
        msg.attach(body)
        server = smtplib.SMTP_SSL(smtp_server, port)
        server.login(sender_email, password)
        server.sendmail(sender_email, recipients.split(','), msg.as_string())
        server.quit()

send_email(email_list, get_posts())